package main

//仅允许使用官方包
import (
	"net/http"
)

// 脚本最下方定义了一些常用函数
// 请勿修改此结构体
type HTTP struct {
	uniqueId int                        `json:"uniqueId"` //请求唯一ID
	Break    bool                       `json:"Break"`    //是否需要设置断点调试,设置后可以在软件界面修改数据
	Display  bool                       `json:"Display"`  //是否需要显示到列表中 [仅Type=1有效]
	Type     int                        `json:"Type"`     //1=发起请求,2=请求完成,3=请求失败 [不可修改]
	PID      int                        `json:"PID"`      //由哪个进程发送的数据,若是为0表示通过代理连接
	URL      string                     `json:"URL"`      //[仅Type=1 可修改]请求的URL
	Method   string                     `json:"Method"`   //[仅Type=1 可修改]
	Header   http.Header                `json:"Header"`   //请求的协议头
	Body     []byte                     `json:"Body"`     //请求的Body
	SetAgent func(ProxyUrl string) bool `json:"-"`        //设置代理,[仅Type=1时有效],格式 socket5://admin:123456@127.0.0.1:8888 或 http://admin:123456@127.0.0.1:8888
	Response struct {                   //[如果Type=1 操作此对象数据,将不发出请求]
		Header    http.Header `json:"Header"`    //响应的协议头
		Body      []byte      `json:"Body"`      //响应的数据
		StateCode int         `json:"StateCode"` //响应的状态码
	} `json:"Response"`
}

// 脚本回调事件 -> HTTP发起请求、HTTP响应请求、HTTP请求错误
func HttpRequestCallbackFunction(Sunny *HTTP) {
	//当收到HTTP发起请求时
	if Sunny.Type == 1 {
		//定位请求,如果URL中不包含xxxxxxxxxxx,直接返回
		if !Contains(Sunny.URL, "xxxxxxxxxxxxxxxxxxxxx") {
			return
		}
		/*
			场景1:私钥解密
			假设提交数据是RSA加密的Base64字符串 fxjDkN5KKdR47gs96G...............Q/Ww==

		*/
		//先将Base64字符串转为字节数组
		Base64Data := GoBase64Decode(string(Sunny.Body))
		if len(Base64Data) < 1 {
			Log("GoBase64Decode 失败")
			return
		}
		//假设你的私钥匙是
		RsaPrivate := `
-----BEGIN RSA PRIVATE KEY-----
MIIEpQIBAAKCAQEA+1I4kkYK4/DnGNc+fsxriIscvEVlY6XuZ73+Uc20gqNi/s0B
vcBLuAVdywF8gWtUG8SDpASCQD0Wqmp38TLKbzJBbnRLcAATz1sgKyBGamC3y/sb
Y3FOvRjyooayknwM0jGL/DGHGxGTQQ9ME/49R7I2Yrc/xKX25s71UdIKo3GpJO3r
drRMpZEsHV9CjLlI8zJy0CivnvalP6tgiAd9qZCluj2jAzvocQ3bCMFfNN6+EILP
5mvcP//vtAj4VMooMm+pNY4eOYO/1dTOmhpYCvJoCatm3Yxo4VmR8RD7PpWc38wV
bGelgzkPmq+qtlN7fG8wmBA9ShAlMTmIfPMz/QIDAQABAoIBAQC9BWMNCOcp90co
1MLpRUBfixmKtLsEDonXtvsvdYKdett6/p+foqCQgGDBzZViFWJGHDBSTR3VyNxi
Qf+CBoxgw7CYrZkLXNOJcmUoanbrjWDPZ0Z7LX5mFPxwptRp/ij6ck9x16JhBn/1
P9cddmuKoAvthRvOAHFJuUCjUFG2CMn8a1IKdobUyMHvS3YCnAVmjcgCEqQx3Dm/
IoRhelfVtR9c6XsqdJBav7Br0RT1TH72CDxilg3YNx9VU1FlT1Iy/k9hyNQhM56M
N/iuYrNRxyD64LMkmQ+q4RHjH6lE07GDoob9tA931euzfMJNetJPvfekpvlr4hkX
kLG3g/11AoGBAP5WW/tjLzgF8bwCIliKubv4bkNIPQ7WNrnL1qX7tsuZ7HkBz4GB
COIDFb3OIVBP6lNMbvpUAnOqKvPcC13is8PTHz3Ng8BcKfmJL0K8RNz8a832vM9Z
uSnH65KfUD6bM6/FpIzg7Csssizhfd17b0QLDxN1UtOPdSATlNLm8SsXAoGBAPz2
0GTp48upXO9LFxOpFTad2zTIUCT9s7DUdRcZUaZJbmTlDLPwRlyvG5CrtYT9nfUD
Sc9F4DtSPfXHyHfzjl9/wZZPhSu9mRjKecJd5uwoAjjmmxvs5ucufcQ282jDdBd/
BnOo9hFb/70ufu8Ayh1I5QxiCsL3hjmJeZhsLLYLAoGBANxgU98k9/shG25+ouf5
fColftUJuO4sKsselmTIEIGmY8IOEZDzD5FWfvYxr6f5Nt7qcZaySFWUcxdN6QN2
tbDONFnGw4xfz3cKqUq3+ytIBNk4HC3GXqyXL8WiCVPWAxkgtg3jrn9SgShmUjsh
Ay4ALxX7KMNroF8k2GVN+lYNAoGBAOGGOex+CTS9XbmJPJ2ulNcIjTHVlH4mIVl5
UJqzW/Pga6dP/a8+e7yN8QldzIswgO67a8Z7CZpZjBvfbX5jiX7iq3iSlKuWcTOE
8GC0zvekA7cvAQI4hvN8o2uXghLYjluUR/A9poN7fdjv5wK1tXu+TVZo4idH/ka1
pc6aQpJZAoGAdVku82hDNOjsg0RL7yuoxYhtX95ffUbeuwAXeMzDXfJx/uf0xIHz
wYlROeNOo5XOpKxXBtb+62WNEqT7TRAevkNofoDO3Gcq91/5hFifcm6ek9YBCNb1
cen211CU4RwjZRWqQTS4CrvlS9SbWx9NV2/WkQNO5Twr4fWzpBBK4U8=
-----END RSA PRIVATE KEY-----
`
		DecData, err := GoRsaPrivateDecrypt(RsaPrivate, Base64Data)
		if err != nil {
			Log("RSA解密失败", err)
			return
		}
		Log("RSA解密结果:", string(DecData))

		/*
			场景2:公钥加密
			假设提交数据是 123456abcd 将提交数据RSA加密后发送到你自己服务器 https://1.2.3.4:8080/api
		*/
		//假设你的公钥是
		RsaPublic := `-----BEGIN PUBLIC KEY-----
MIIBCgKCAQEA+1I4kkYK4/DnGNc+fsxriIscvEVlY6XuZ73+Uc20gqNi/s0BvcBL
uAVdywF8gWtUG8SDpASCQD0Wqmp38TLKbzJBbnRLcAATz1sgKyBGamC3y/sbY3FO
vRjyooayknwM0jGL/DGHGxGTQQ9ME/49R7I2Yrc/xKX25s71UdIKo3GpJO3rdrRM
pZEsHV9CjLlI8zJy0CivnvalP6tgiAd9qZCluj2jAzvocQ3bCMFfNN6+EILP5mvc
P//vtAj4VMooMm+pNY4eOYO/1dTOmhpYCvJoCatm3Yxo4VmR8RD7PpWc38wVbGel
gzkPmq+qtlN7fG8wmBA9ShAlMTmIfPMz/QIDAQAB
-----END PUBLIC KEY-----`

		EncData, err := GoRsaPublicEncrypt(RsaPublic, Sunny.Body)
		if err != nil {
			Log("RSA加密失败", err)
			return
		}
		header := make(http.Header)
		header.Set("Content-Type", "application/octet-stream")
		resBody, resHeader, err := GoHTTPRequest("POST", "https://1.2.3.4:8080/api", EncData, header)
		if err != nil {
			Log("发送到API失败", err)
			return
		}
		Log("API响应Header", resHeader, "API响应Body", string(resBody))
	}
}

// 请勿修改此结构体
type WebSocket struct {
	uniqueId         int                                     //请求唯一ID
	Display          bool                                    //是否需要显示到列表中 [仅Type=2、3有效]
	Type             int                                     //1=连接成功,2=客户端发送数据,3=客户端收到数据,4=连接断开 [不可修改]
	PID              int                                     //由哪个进程发送的数据,若是为0表示通过代理连接
	URL              string                                  //连接的URL
	Method           string                                  //连接时的Method 一般为 GET
	Header           http.Header                             //连接时携带的协议头
	MessageType      int                                     //Websocket消息Body的类型1=Text 2=Binary 8=Close 9=Ping 10=Pong
	Body             []byte                                  //即将发送、接收的数据 //如果将数据修改未空,表示取消本次发送、接收
	SendDataToServer func(MessageType int, data []byte) bool //向服务器发送数据的函数
	SendDataToClient func(MessageType int, data []byte) bool //向客户端发送数据的函数
	Close            func() bool                             //关闭、断开此WebSocket会话
}

// WebSocket回调事件 -> 发送消息、收到消息、连接成功、连接断开
func WebSocketCallbackFunction(Sunny *WebSocket) {

}

// 请勿修改此结构体
type TcpSocket struct {
	uniqueId         int                          //请求唯一ID
	Display          bool                         //是否需要显示到列表中 [仅Type=2、3有效]
	Type             int                          //0=即将连接,1=连接成功,2=客户端发送数据,3=客户端收到数据,4=连接断开
	PID              int                          //由哪个进程发送的数据,若是为0表示通过代理连接
	Body             []byte                       //即将发送、接收的数据 //如果将数据修改未空,表示取消本次发送、接收
	LocalAddress     string                       //本地地址
	RemoteAddress    string                       //远程地址
	SetConnectionIP  func(NewAddress string) bool //重定向到新地址,[仅Type=0时有效]
	SetAgent         func(ProxyUrl string) bool   //设置代理,[仅Type=0时有效],格式socket5://admin:123456@127.0.0.1:8888
	SendDataToServer func(data []byte) bool       //向服务器发送数据的函数
	SendDataToClient func(data []byte) bool       //向客户端发送数据的函数
	Close            func() bool                  //关闭、断开此TCP会话
}

// tcp回调事件 -> 即将连接、发送消息、收到消息、连接成功、连接断开
func tcpCallbackFunction(Sunny *TcpSocket) {

}

type UdpSocket struct {
	Display       bool   //是否需要显示到列表中 [仅Type=2、3有效]
	uniqueId      int    //请求唯一ID
	Type          int    //1=客户端发送数据,2=客户端收到数据,3=连接断开
	PID           int    //由哪个进程发送的数据,若是为0表示通过代理连接
	LocalAddress  string //本地地址
	RemoteAddress string //远程地址
	Body          []byte //即将发送、接收的数据 //如果将数据修改未空,表示取消本次发送、接收
}

// udp回调事件 -> 发送消息、收到消息、连接断开
func udpCallbackFunction(Sunny *UdpSocket) {

}
