package main

//仅允许使用官方包
import (
	"encoding/json"
	"net/http"
)

// 脚本最下方定义了一些常用函数
// 请勿修改此结构体
type HTTP struct {
	uniqueId int                        `json:"uniqueId"` //请求唯一ID
	Break    bool                       `json:"Break"`    //是否需要设置断点调试,设置后可以在软件界面修改数据
	Display  bool                       `json:"Display"`  //是否需要显示到列表中 [仅Type=1有效]
	Type     int                        `json:"Type"`     //1=发起请求,2=请求完成,3=请求失败 [不可修改]
	PID      int                        `json:"PID"`      //由哪个进程发送的数据,若是为0表示通过代理连接
	URL      string                     `json:"URL"`      //[仅Type=1 可修改]请求的URL
	Method   string                     `json:"Method"`   //[仅Type=1 可修改]
	Header   http.Header                `json:"Header"`   //请求的协议头
	Body     []byte                     `json:"Body"`     //请求的Body
	SetAgent func(ProxyUrl string) bool `json:"-"`        //设置代理,[仅Type=1时有效],格式 socket5://admin:123456@127.0.0.1:8888 或 http://admin:123456@127.0.0.1:8888
	Response struct {                   //[如果Type=1 操作此对象数据,将不发出请求]
		Header    http.Header `json:"Header"`    //响应的协议头
		Body      []byte      `json:"Body"`      //响应的数据
		StateCode int         `json:"StateCode"` //响应的状态码
	} `json:"Response"`
}

// 脚本回调事件 -> HTTP发起请求、HTTP响应请求、HTTP请求错误
func HttpRequestCallbackFunction(Sunny *HTTP) {
	//当收到HTTP发起请求时
	if Sunny.Type == 1 {
		//定位请求,如果URL中不包含xxxxxxxxxxx,直接返回
		if !Contains(Sunny.URL, "xxxxxxxxxxxxxxxxxxxxx") {
			return
		}
		//使用场景1,对这个请求请求使用代理IP
		//假设你的代理API地址是 https://baidu.com/getip
		data, Header, err := GoHTTPRequest("GET", "https://baidu.com/getip", "")
		if err != nil {
			Log("获取代理IP失败:", err)
			return
		}
		//将数据转为字符串
		ip := string(data)
		Log("获取的代理IP:", ip)
		//假设返回的ip是：1.2.3.4:1234 那么使用代理IP方式
		Sunny.SetAgent("http://" + ip)
		//假设有账号密码 admin 123456
		Sunny.SetAgent("http://admin:123456@" + ip)

		//使用场景2
		//将数据转发到你自己的服务器 假设你的服务器地址是  "https://baidu.com/update"
		//1.将数据序列化
		SunnyData, e := json.Marshal(Sunny)
		if e != nil {
			Log("序列化数据失败")
			return
		}
		//构造提交协议头
		POSTHeader := make(http.Header)
		POSTHeader["Content-Type"] = []string{"application/json; charset=UTF-8"}
		//发送POST请求
		ResponseData, ResponseHeader, err := GoHTTPRequest("POST", "https://baidu.com/update", SunnyData, POSTHeader)
		if err != nil {
			Log("提交请求失败:", err)
			return
		}
		//ResponseHeader 是你服务器返回的协议头
		//ResponseData 是你服务器响应的数据
		if len(ResponseData) > 0 {
			//直接修改响应为你服务器返回的内容
			Sunny.Response.Body = ResponseData
			//修改响应协议头为你服务器响应的协议头
			Sunny.Response.Header = ResponseHeader
			//修改响应状态码为200
			Sunny.Response.StateCode = 200
		}
	}

}

// 请勿修改此结构体
type WebSocket struct {
	uniqueId         int                                     //请求唯一ID
	Display          bool                                    //是否需要显示到列表中 [仅Type=2、3有效]
	Type             int                                     //1=连接成功,2=客户端发送数据,3=客户端收到数据,4=连接断开 [不可修改]
	PID              int                                     //由哪个进程发送的数据,若是为0表示通过代理连接
	URL              string                                  //连接的URL
	Method           string                                  //连接时的Method 一般为 GET
	Header           http.Header                             //连接时携带的协议头
	MessageType      int                                     //Websocket消息Body的类型1=Text 2=Binary 8=Close 9=Ping 10=Pong
	Body             []byte                                  //即将发送、接收的数据 //如果将数据修改未空,表示取消本次发送、接收
	SendDataToServer func(MessageType int, data []byte) bool //向服务器发送数据的函数
	SendDataToClient func(MessageType int, data []byte) bool //向客户端发送数据的函数
	Close            func() bool                             //关闭、断开此WebSocket会话
}

// WebSocket回调事件 -> 发送消息、收到消息、连接成功、连接断开
func WebSocketCallbackFunction(Sunny *WebSocket) {

}

// 请勿修改此结构体
type TcpSocket struct {
	uniqueId         int                          //请求唯一ID
	Display          bool                         //是否需要显示到列表中 [仅Type=2、3有效]
	Type             int                          //0=即将连接,1=连接成功,2=客户端发送数据,3=客户端收到数据,4=连接断开
	PID              int                          //由哪个进程发送的数据,若是为0表示通过代理连接
	Body             []byte                       //即将发送、接收的数据 //如果将数据修改未空,表示取消本次发送、接收
	LocalAddress     string                       //本地地址
	RemoteAddress    string                       //远程地址
	SetConnectionIP  func(NewAddress string) bool //重定向到新地址,[仅Type=0时有效]
	SetAgent         func(ProxyUrl string) bool   //设置代理,[仅Type=0时有效],格式socket5://admin:123456@127.0.0.1:8888
	SendDataToServer func(data []byte) bool       //向服务器发送数据的函数
	SendDataToClient func(data []byte) bool       //向客户端发送数据的函数
	Close            func() bool                  //关闭、断开此TCP会话
}

// tcp回调事件 -> 即将连接、发送消息、收到消息、连接成功、连接断开
func tcpCallbackFunction(Sunny *TcpSocket) {

}

type UdpSocket struct {
	Display       bool   //是否需要显示到列表中 [仅Type=2、3有效]
	uniqueId      int    //请求唯一ID
	Type          int    //1=客户端发送数据,2=客户端收到数据,3=连接断开
	PID           int    //由哪个进程发送的数据,若是为0表示通过代理连接
	LocalAddress  string //本地地址
	RemoteAddress string //远程地址
	Body          []byte //即将发送、接收的数据 //如果将数据修改未空,表示取消本次发送、接收
}

// udp回调事件 -> 发送消息、收到消息、连接断开
func udpCallbackFunction(Sunny *UdpSocket) {

}

